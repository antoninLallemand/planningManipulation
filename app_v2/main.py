# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'planning.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets
import sys, os
from settings import settingsHandler
import copy

class PlanningThread(QtCore.QThread):
    # Signal to notify when the planning generation is complete 
    finished = QtCore.pyqtSignal(list)

    def __init__(self, file, config):
        super().__init__()
        self.file = file
        self.config = config

    def run(self):
        # Perform the heavy task here
        import planning_generation  # Import inside the thread to avoid unnecessary overhead
        figures = planning_generation.generate_planning(self.file, self.config)
        self.finished.emit(figures)  # Emit the result when done

class ScreenshotDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Enregistrer le planning")
        self.setModal(True)

        layout = QtWidgets.QVBoxLayout()

        self.label = QtWidgets.QLabel("Entrer le nom du fichier (sans extension):")
        layout.addWidget(self.label)

        self.filename_input = QtWidgets.QLineEdit()
        layout.addWidget(self.filename_input)

        button_layout = QtWidgets.QHBoxLayout()
        self.cancel_button = QtWidgets.QPushButton("Annuler")
        self.save_button = QtWidgets.QPushButton("Enregistrer")
        self.save_button.setDefault(True)
        button_layout.addWidget(self.cancel_button)
        button_layout.addWidget(self.save_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        self.save_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

    def get_filename(self):
        return self.filename_input.text()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(929, 642)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.MainVLayout = QtWidgets.QVBoxLayout()
        self.MainVLayout.setObjectName("MainVLayout")
        self.titleLayout = QtWidgets.QVBoxLayout()
        self.titleLayout.setContentsMargins(-1, 10, -1, 10)
        self.titleLayout.setObjectName("titleLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.mainTitle = QtWidgets.QLabel(self.centralwidget)
        self.mainTitle.setObjectName("mainTitle")
        self.horizontalLayout.addWidget(self.mainTitle)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.titleLayout.addLayout(self.horizontalLayout)
        self.MainVLayout.addLayout(self.titleLayout)
        self.contentLayout = QtWidgets.QVBoxLayout()
        self.contentLayout.setObjectName("contentLayout")
        self.mainTabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.mainTabWidget.setEnabled(True)
        self.mainTabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.mainTabWidget.setObjectName("mainTabWidget")
        self.homeTab = QtWidgets.QWidget()
        self.homeTab.setObjectName("homeTab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.homeTab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.GenerationMainVLayout = QtWidgets.QVBoxLayout()
        self.GenerationMainVLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.GenerationMainVLayout.setContentsMargins(20, 20, 20, 20)
        self.GenerationMainVLayout.setSpacing(20)
        self.GenerationMainVLayout.setObjectName("GenerationMainVLayout")
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.GenerationMainVLayout.addItem(spacerItem2)
        self.browseXlsLabelHLayout = QtWidgets.QHBoxLayout()
        self.browseXlsLabelHLayout.setObjectName("browseXlsLabelHLayout")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.browseXlsLabelHLayout.addItem(spacerItem3)
        self.BrowseXlsLabel = QtWidgets.QLabel(self.homeTab)
        self.BrowseXlsLabel.setObjectName("BrowseXlsLabel")
        self.browseXlsLabelHLayout.addWidget(self.BrowseXlsLabel)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.browseXlsLabelHLayout.addItem(spacerItem4)
        self.GenerationMainVLayout.addLayout(self.browseXlsLabelHLayout)
        self.browseXlsButtonHLayout = QtWidgets.QHBoxLayout()
        self.browseXlsButtonHLayout.setObjectName("browseXlsButtonHLayout")
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.browseXlsButtonHLayout.addItem(spacerItem5)
        self.browseXlsButton = QtWidgets.QPushButton(self.homeTab)
        self.browseXlsButton.setObjectName("browseXlsButton")
        self.browseXlsButtonHLayout.addWidget(self.browseXlsButton)
        self.browsedXlsLine = QtWidgets.QLineEdit(self.homeTab)
        self.browsedXlsLine.setReadOnly(True)
        self.browsedXlsLine.setObjectName("browsedXlsLine")
        self.browseXlsButtonHLayout.addWidget(self.browsedXlsLine)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.browseXlsButtonHLayout.addItem(spacerItem6)
        self.GenerationMainVLayout.addLayout(self.browseXlsButtonHLayout)
        spacerItem7 = QtWidgets.QSpacerItem(656, 138, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.GenerationMainVLayout.addItem(spacerItem7)
        self.generatePlanningLabelHLayout = QtWidgets.QHBoxLayout()
        self.generatePlanningLabelHLayout.setObjectName("generatePlanningLabelHLayout")
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.generatePlanningLabelHLayout.addItem(spacerItem8)
        self.GeneratePlanningLabel = QtWidgets.QLabel(self.homeTab)
        self.GeneratePlanningLabel.setObjectName("GeneratePlanningLabel")
        self.generatePlanningLabelHLayout.addWidget(self.GeneratePlanningLabel)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.generatePlanningLabelHLayout.addItem(spacerItem9)
        self.GenerationMainVLayout.addLayout(self.generatePlanningLabelHLayout)
        self.generateButtonHLayout = QtWidgets.QHBoxLayout()
        self.generateButtonHLayout.setObjectName("generateButtonHLayout")
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.generateButtonHLayout.addItem(spacerItem10)
        self.generatePlanningButton = QtWidgets.QPushButton(self.homeTab)
        self.generatePlanningButton.setObjectName("generatePlanningButton")
        self.generateButtonHLayout.addWidget(self.generatePlanningButton)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.generateButtonHLayout.addItem(spacerItem11)
        self.GenerationMainVLayout.addLayout(self.generateButtonHLayout)
        spacerItem12 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.GenerationMainVLayout.addItem(spacerItem12)
        self.verticalLayout_4.addLayout(self.GenerationMainVLayout)
        self.mainTabWidget.addTab(self.homeTab, "")
        self.resultTab = QtWidgets.QWidget()
        self.resultTab.setObjectName("resultTab")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.resultTab)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.resultMainVLayout = QtWidgets.QVBoxLayout()
        self.resultMainVLayout.setObjectName("resultMainVLayout")
        self.resultCarousel = QtWidgets.QStackedWidget(self.resultTab)
        self.resultCarousel.setObjectName("resultCarousel")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.resultCarousel.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.resultCarousel.addWidget(self.page_2)
        self.resultMainVLayout.addWidget(self.resultCarousel)
        self.CarousselButtonsHLayout = QtWidgets.QHBoxLayout()
        self.CarousselButtonsHLayout.setObjectName("CarousselButtonsHLayout")
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.CarousselButtonsHLayout.addItem(spacerItem13)
        self.carouselPreviousButton = QtWidgets.QPushButton(self.resultTab)
        self.carouselPreviousButton.setObjectName("carouselPreviousButton")
        self.CarousselButtonsHLayout.addWidget(self.carouselPreviousButton)
        self.carouselNextButton = QtWidgets.QPushButton(self.resultTab)
        self.carouselNextButton.setObjectName("carouselNextButton")
        self.CarousselButtonsHLayout.addWidget(self.carouselNextButton)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.CarousselButtonsHLayout.addItem(spacerItem14)
        self.downloadButton = QtWidgets.QPushButton(self.resultTab)
        self.downloadButton.setObjectName("downloadButton")
        self.CarousselButtonsHLayout.addWidget(self.downloadButton)
        spacerItem15 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.CarousselButtonsHLayout.addItem(spacerItem15)
        self.resultMainVLayout.addLayout(self.CarousselButtonsHLayout)
        self.verticalLayout_3.addLayout(self.resultMainVLayout)
        self.mainTabWidget.addTab(self.resultTab, "")
        self.configTab = QtWidgets.QWidget()
        self.configTab.setObjectName("configTab")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.configTab)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(50, 50, 50, 50)
        self.verticalLayout_2.setSpacing(15)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem16 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem16)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem17)
        self.OveralSettingsLabel = QtWidgets.QLabel(self.configTab)
        self.OveralSettingsLabel.setObjectName("OveralSettingsLabel")
        self.horizontalLayout_2.addWidget(self.OveralSettingsLabel)
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem18)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem19, 1, 0, 1, 1)
        self.RoleLabel = QtWidgets.QLabel(self.configTab)
        self.RoleLabel.setObjectName("RoleLabel")
        self.gridLayout.addWidget(self.RoleLabel, 1, 1, 1, 1)
        self.SettingsRoleComboBox = QtWidgets.QComboBox(self.configTab)
        self.SettingsRoleComboBox.setObjectName("SettingsRoleComboBox")
        self.gridLayout.addWidget(self.SettingsRoleComboBox, 1, 2, 1, 1)
        self.SettingsNameLineEdit = QtWidgets.QLineEdit(self.configTab)
        self.SettingsNameLineEdit.setObjectName("SettingsNameLineEdit")
        self.gridLayout.addWidget(self.SettingsNameLineEdit, 0, 2, 1, 1)
        self.SettingsNameLabel = QtWidgets.QLabel(self.configTab)
        self.SettingsNameLabel.setObjectName("SettingsNameLabel")
        self.gridLayout.addWidget(self.SettingsNameLabel, 0, 1, 1, 1)
        spacerItem20 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem20, 0, 3, 1, 1)
        spacerItem21 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem21, 1, 3, 1, 1)
        spacerItem22 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem22, 0, 0, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout)
        spacerItem23 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem23)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem24 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem24)
        self.ColorsLabel = QtWidgets.QLabel(self.configTab)
        self.ColorsLabel.setObjectName("ColorsLabel")
        self.horizontalLayout_3.addWidget(self.ColorsLabel)
        spacerItem25 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem25)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.SickColorLabel = QtWidgets.QLabel(self.configTab)
        self.SickColorLabel.setObjectName("SickColorLabel")
        self.gridLayout_2.addWidget(self.SickColorLabel, 2, 1, 1, 1)
        self.OffColorLabel = QtWidgets.QLabel(self.configTab)
        self.OffColorLabel.setObjectName("OffColorLabel")
        self.gridLayout_2.addWidget(self.OffColorLabel, 0, 1, 1, 1)
        self.WorkColorLabel = QtWidgets.QLabel(self.configTab)
        self.WorkColorLabel.setObjectName("WorkColorLabel")
        self.gridLayout_2.addWidget(self.WorkColorLabel, 1, 1, 1, 1)
        self.VacColorLabel = QtWidgets.QLabel(self.configTab)
        self.VacColorLabel.setObjectName("VacColorLabel")
        self.gridLayout_2.addWidget(self.VacColorLabel, 3, 1, 1, 1)
        self.OffColorPushButton = QtWidgets.QPushButton(self.configTab)
        self.OffColorPushButton.setObjectName("OffColorPushButton")
        self.gridLayout_2.addWidget(self.OffColorPushButton, 0, 2, 1, 1)
        self.SickColorPushButton = QtWidgets.QPushButton(self.configTab)
        self.SickColorPushButton.setObjectName("SickColorPushButton")
        self.gridLayout_2.addWidget(self.SickColorPushButton, 2, 2, 1, 1)
        self.WorkColorPushButton = QtWidgets.QPushButton(self.configTab)
        self.WorkColorPushButton.setObjectName("WorkColorPushButton")
        self.gridLayout_2.addWidget(self.WorkColorPushButton, 1, 2, 1, 1)
        self.VacColorPushButton = QtWidgets.QPushButton(self.configTab)
        self.VacColorPushButton.setObjectName("VacColorPushButton")
        self.gridLayout_2.addWidget(self.VacColorPushButton, 3, 2, 1, 1)
        self.UndefColorLabel = QtWidgets.QLabel(self.configTab)
        self.UndefColorLabel.setObjectName("UndefColorLabel")
        self.gridLayout_2.addWidget(self.UndefColorLabel, 4, 1, 1, 1)
        self.UndefColorPushButton = QtWidgets.QPushButton(self.configTab)
        self.UndefColorPushButton.setObjectName("UndefColorPushButton")
        self.gridLayout_2.addWidget(self.UndefColorPushButton, 4, 2, 1, 1)
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem26, 0, 0, 1, 1)
        spacerItem27 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem27, 1, 0, 1, 1)
        spacerItem28 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem28, 2, 0, 1, 1)
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem29, 3, 0, 1, 1)
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem30, 4, 0, 1, 1)
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem31, 0, 3, 1, 1)
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem32, 1, 3, 1, 1)
        spacerItem33 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem33, 2, 3, 1, 1)
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem34, 3, 3, 1, 1)
        spacerItem35 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem35, 4, 3, 1, 1)
        self.verticalLayout_2.addLayout(self.gridLayout_2)
        spacerItem36 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem36)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem37 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem37)
        self.ValidateSettingsButton = QtWidgets.QPushButton(self.configTab)
        self.ValidateSettingsButton.setObjectName("ValidateSettingsButton")
        self.horizontalLayout_4.addWidget(self.ValidateSettingsButton)
        spacerItem38 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem38)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        spacerItem39 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem39)
        self.verticalLayout_5.addLayout(self.verticalLayout_2)
        self.mainTabWidget.addTab(self.configTab, "")
        self.contentLayout.addWidget(self.mainTabWidget)
        self.MainVLayout.addLayout(self.contentLayout)
        self.verticalLayout.addLayout(self.MainVLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.mainTabWidget.setCurrentIndex(1)
        self.resultCarousel.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.mainTabWidget.setCurrentIndex(0)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Générateur planning"))
        self.mainTitle.setText(_translate("MainWindow", "Générateur de plannings pharmacie"))
        self.BrowseXlsLabel.setText(_translate("MainWindow", "Selectionner un fichier .xls/.xlsm"))
        self.browseXlsButton.setText(_translate("MainWindow", "Parcourir"))
        self.GeneratePlanningLabel.setText(_translate("MainWindow", "Lancer la génération du planning"))
        self.generatePlanningButton.setText(_translate("MainWindow", "Générer"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.homeTab), _translate("MainWindow", "Génération"))
        self.carouselPreviousButton.setText(_translate("MainWindow", "Précedent"))
        self.carouselNextButton.setText(_translate("MainWindow", "Suivant"))
        self.downloadButton.setText(_translate("MainWindow", "Enregistrer (png)"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.resultTab), _translate("MainWindow", "Résultat"))
        self.OveralSettingsLabel.setText(_translate("MainWindow", "Général"))
        self.RoleLabel.setText(_translate("MainWindow", "Rôle : "))
        self.SettingsNameLabel.setText(_translate("MainWindow", "Nom : "))
        self.ColorsLabel.setText(_translate("MainWindow", "Couleurs"))
        self.SickColorLabel.setText(_translate("MainWindow", "Maladie :"))
        self.OffColorLabel.setText(_translate("MainWindow", "Repos : "))
        self.WorkColorLabel.setText(_translate("MainWindow", "Travail : "))
        self.VacColorLabel.setText(_translate("MainWindow", "Vacances : "))
        self.OffColorPushButton.setText(_translate("MainWindow", "Modifier"))
        self.SickColorPushButton.setText(_translate("MainWindow", "Modifier"))
        self.WorkColorPushButton.setText(_translate("MainWindow", "Modifier"))
        self.VacColorPushButton.setText(_translate("MainWindow", "Modifier"))
        self.UndefColorLabel.setText(_translate("MainWindow", "Inconnu : "))
        self.UndefColorPushButton.setText(_translate("MainWindow", "Mofidier"))
        self.ValidateSettingsButton.setText(_translate("MainWindow", "Appliquer les modifications"))
        self.mainTabWidget.setTabText(self.mainTabWidget.indexOf(self.configTab), _translate("MainWindow", "Paramètres"))

        """IMPLEMENTATION"""

        self.settings_handler = settingsHandler()

        self.config = self.settings_handler.retrieve()
        self.selected_file = ""

        self.mainTabWidget.setTabEnabled(1, False)
        self.mainTabWidget.setCurrentIndex(self.mainTabWidget.indexOf(self.homeTab))

        self.loader = QtGui.QMovie("assets:loader.gif")
        self.original_text = self.generatePlanningButton.text()

        # Connect signals to slots
        self.browseXlsButton.clicked.connect(self.browse_xls)
        self.generatePlanningButton.clicked.connect(self.generate_planning)

        """RESULT PAGE"""

        self.carouselPreviousButton.clicked.connect(self.show_previous_image)
        self.carouselNextButton.clicked.connect(self.show_next_image)
        self.downloadButton.clicked.connect(self.take_screenshot)

        """SETTINGS PAGE"""
        self.SettingsNameLineEdit.setText(self.config['name'])

        self.SettingsRoleComboBox.addItem("pharmacien")
        self.SettingsRoleComboBox.addItem("préparateur en pharmacie")
        self.SettingsRoleComboBox.addItem("autre")
        self.SettingsRoleComboBox.setCurrentIndex(self.config['role'])

        self.config_colors = copy.deepcopy(self.config['colors'])
        self.selected_colors = copy.deepcopy(self.config['colors'])

        self.OffColorPushButton.setStyleSheet(f"color: black; background-color: {self.selected_colors['off']};")
        self.OffColorPushButton.clicked.connect(lambda: self.open_color_dialog(self.OffColorPushButton, 'off'))

        self.WorkColorPushButton.setStyleSheet(f"color: black; background-color: {self.selected_colors['work']};")
        self.WorkColorPushButton.clicked.connect(lambda: self.open_color_dialog(self.WorkColorPushButton, 'work'))

        self.SickColorPushButton.setStyleSheet(f"color: black; background-color: {self.selected_colors['sick']};")
        self.SickColorPushButton.clicked.connect(lambda: self.open_color_dialog(self.SickColorPushButton, 'sick'))

        self.VacColorPushButton.setStyleSheet(f"color: black; background-color: {self.selected_colors['vacation']};")
        self.VacColorPushButton.clicked.connect(lambda: self.open_color_dialog(self.VacColorPushButton, 'vacation'))

        self.UndefColorPushButton.setStyleSheet(f"color: black; background-color: {self.selected_colors['undefined']};")
        self.UndefColorPushButton.clicked.connect(lambda: self.open_color_dialog(self.UndefColorPushButton, 'undefined'))

        self.ValidateSettingsButton.clicked.connect(self.save_modified_settings)

        """Functions"""

    def browse_xls(self):
        default_folder = QtCore.QDir.homePath() + "/Downloads"
        if not os.path.exists(default_folder):
            default_folder = ""
        file_name, _ = QtWidgets.QFileDialog.getOpenFileName(MainWindow, "Selectionner un planning excel", default_folder, "Fichiers Excel (*.xls *.xlsm *.xlsx)")
        if file_name:
            self.browsedXlsLine.setText(file_name)
            self.selected_file = file_name

    def update_icon(self):
        self.generatePlanningButton.setIcon(QtGui.QIcon(self.loader.currentPixmap()))

    def generate_planning(self):
        # Implement your logic for generating the planning
        print("Generate planning clicked")
        if self.selected_file == "":
            QtWidgets.QMessageBox.warning(MainWindow, "No File Selected", "Please select a file before running generation.")
        else:
            self.generatePlanningButton.setText("")
            self.generatePlanningButton.setEnabled(False)
            self.generatePlanningButton.setIcon(QtGui.QIcon(self.loader.currentPixmap()))
            self.loader.frameChanged.connect(self.update_icon)
            self.loader.start()

            # Start the background thread for planning generation
            self.thread = PlanningThread(self.selected_file, self.config)
            self.thread.finished.connect(self.on_generation_complete)
            self.thread.start()

    def on_generation_complete(self, figures):
        # Handle the results and stop the loader animation
        self.loader.stop()
        self.generatePlanningButton.setIcon(QtGui.QIcon())  # Clear the icon
        self.generatePlanningButton.setText(self.original_text)
        self.generatePlanningButton.setEnabled(True)

        # Process the generated figures
        self.mainTabWidget.setTabEnabled(1, True)
        self.mainTabWidget.setCurrentIndex(1)

        self.clear_all_pages()

        if len(figures) > 1:
            self.carouselNextButton.setEnabled(True)
        for fig in figures:
            html = fig.to_html(include_plotlyjs="cdn")
            web_view = QtWebEngineWidgets.QWebEngineView()
            web_view.setHtml(html)
            self.resultCarousel.addWidget(web_view)

    def update_button_states(self):
        """Enable/disable buttons based on the current index in the carousel."""
        current_index = self.resultCarousel.currentIndex()
        total_images = self.resultCarousel.count()
        # Disable "Previous" if at the first image
        self.carouselPreviousButton.setEnabled(current_index > 0)
        # Disable "Next" if at the last image
        self.carouselNextButton.setEnabled(current_index < total_images - 1)

    def show_previous_image(self):
        # Show the previous image in the carousel
        current_index = self.resultCarousel.currentIndex()
        if current_index > 0:
            self.resultCarousel.setCurrentIndex(current_index - 1)
            self.update_button_states()

    def show_next_image(self):
        # Show the next image in the carousel
        current_index = self.resultCarousel.currentIndex()
        if current_index < self.resultCarousel.count() - 1:
            self.resultCarousel.setCurrentIndex(current_index + 1)
            self.update_button_states()


    def clear_all_pages(self):
        # Remove all pages from the QStackedWidget
        while self.resultCarousel.count() > 0:
            widget_to_remove = self.resultCarousel.widget(0)  # Always get the first widget
            self.resultCarousel.removeWidget(widget_to_remove)
            widget_to_remove.deleteLater()  # Safely delete the widget
        print("All pages removed successfully")
        self.carouselNextButton.setEnabled(False)
        self.carouselPreviousButton.setEnabled(False)

    def take_screenshot(self):
        # Capture screenshot
        screenshot = self.resultCarousel.grab()

        # Open dialog to get file name
        dialog = ScreenshotDialog(MainWindow)
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            filename = dialog.get_filename()
            if filename:
                try:
                    # Get the Downloads folder path
                    downloads_folder = QtCore.QDir.homePath() + "/Downloads"
                    if not os.path.exists(downloads_folder):
                        os.makedirs(downloads_folder)
                    file_path = os.path.join(downloads_folder, f"{filename}.png")

                    # Save screenshot
                    screenshot.save(file_path, "PNG")
                    print(f"Screenshot saved at: {file_path}")
                except Exception as e:
                    QtWidgets.QMessageBox.warning(MainWindow, "Erreur lors de l'enregistrement", f"Erreur : {e}")
            else :
                QtWidgets.QMessageBox.warning(MainWindow, "Nom de fichier non valide", "Veuillez entrer un nom valide")

    def open_color_dialog(self, color_button: QtWidgets.QPushButton, color_type):
        """Open the color picker dialog and set the selected color."""
        color = QtWidgets.QColorDialog.getColor(QtGui.QColor(self.selected_colors[color_type]), MainWindow)

        if color.isValid():  # Check if a valid color is selected
            self.selected_colors[color_type] = color.name()
            color_button.setStyleSheet(f"color: black; background-color: {color.name()};")

    def save_modified_settings(self):
        name = self.SettingsNameLineEdit.text()
        if name == "":
            name = self.config['name']
            QtWidgets.QMessageBox.warning(MainWindow, "Nom de fichier non valide", "Veuillez entrer un nom valide")
        else:
            selected_role = self.SettingsRoleComboBox.currentIndex()
            success = self.settings_handler.save(name, selected_role, self.selected_colors)
            if success:
                self.config = self.settings_handler.retrieve()
                QtWidgets.QMessageBox.information(MainWindow, "Enregistrement des modifications", "Les modifications ont bien été enregistrées")
                print("save settings")
            else:
                QtWidgets.QMessageBox.warning(MainWindow, "Erreur d'enregistrement", "Une erreur est survenue lors de l'enregistrement du fichier, veuillez réesayer")



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    # Load translator
    translator = QtCore.QTranslator()
    if translator.load(os.path.join(QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.TranslationsPath), 'qtbase_fr.qm')):
        app.installTranslator(translator)
        print("Translation loaded successfully.")
    else:
        print("Failed to load translation.")

    if hasattr(sys, '_MEIPASS'):
        assets_path = os.path.join(sys._MEIPASS, 'assets')
    else:
        assets_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'assets')

    QtCore.QDir.addSearchPath('assets', assets_path)

    # Set application icon
    app.setWindowIcon(QtGui.QIcon('assets:Logo.png'))

    #define qss px values
    screen = app.primaryScreen()
    width = screen.size().width()
    print(width)
    scale_factor = width / 1920  # Baseline scaling
    font_size = int(30 * scale_factor)
    padding = int(10 * scale_factor)
    title_fs = int(50 * scale_factor)
    browsed_fs = int(20 * scale_factor)

    # Apply stylesheet
    file = QtCore.QFile('assets:style.qss')
    if file.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text):
        qss_template = str(file.readAll(), encoding='utf-8')  # Convert QByteArray to string
        qss = qss_template.replace("'(*_padding_*)'", str(padding))
        qss = qss.replace("'(*_font_size_*)'", str(font_size))
        qss = qss.replace("'(*_title_fs_*)'", str(title_fs))
        qss = qss.replace("'(*_browsed_fs_*)'", str(browsed_fs))

        app.setStyleSheet(qss)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.showMaximized()
    sys.exit(app.exec_())
